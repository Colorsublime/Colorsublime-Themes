{
  "name": "foreachasync",
  "version": "3.0.0",
  "description": "A node- and browser-ready async counterpart of Array.prototype.forEach",
  "homepage": "https://github.com/FuturesJS/forEachAsync",
  "main": "forEachAsync.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/FuturesJS/forEachAsync.git"
  },
  "keywords": [
    "futuresjs",
    "forEach",
    "for",
    "forEachAsync",
    "async",
    "futures",
    "each"
  ],
  "author": {
    "name": "AJ ONeal",
    "email": "coolaj86@gmail.com",
    "url": "http://coolaj86.com/"
  },
  "license": "Apache2",
  "bugs": {
    "url": "https://github.com/FuturesJS/forEachAsync/issues"
  },
  "readme": "forEachAsync\n===\n\nAnalogous to `[].forEach`, but handles items asynchronously with a final callback passed to `then`.\n\nThis is the most essential piece of the [`ArrayAsync`](https://github.com/FuturesJS/ArrayAsync) package.\n\nv3.x - Diet Cola Edition\n---\n\nAs I do every few years, I decided to rewrite FuturesJS.\nThis year's remake is extremely lightweight.\n\nUsage\n===\n\nIt's as simple as you could guess:\n\n```javascript\n  // waits for one request to finish before beginning the next\n  forEachAsync(['dogs', 'cats', 'octocats'], function (next, element, index, array) {\n    getPics(element, next);\n  \n  // then after all of the elements have been handled\n  // the final callback fires to let you know it's all done\n  }).then(function () {\n    console.log('All requests have finished');\n  });\n\n  // where `getPics` might be an asynchronous web request such as this\n  function getPics(animal, cb) {\n    var flickerAPI = \"http://api.flickr.com/services/feeds/photos_public.gne?jsoncallback=?\";\n    $.getJSON(\n      flickerAPI\n    , { tags: thing\n      , tagmode: \"any\"\n      , format: \"json\"\n      , success: function (data) {\n          console.log('teh animals:', data);\n        }\n      , complete: cb\n      }\n    );\n  }\n```\n\n\nBrowser Installation\n===\n\nYou can install from bower:\n\n```bash\nbower install forEachAsync\n```\n\nOr download the raw file from <https://raw.github.com/FuturesJS/forEachAsync/master/forEachAsync.js>:\n\n```bash\nwget https://raw.github.com/FuturesJS/forEachAsync/master/forEachAsync.js\n```\n\n```javascript\n(function () {\n  'use strict';\n\n  var forEachAsync = window.forEachAsync\n    ;\n\n  // do stuff ...\n}());\n```\n\nOr you can build it alongside other libraries:\n\n```bash\nnpm install -g pakmanager\nnpm install forEachAsync --save\npakmanager -e browser build\n```\n\n```html\n<script src=\"pakmanaged.js\"></script>\n```\n\n```javascript\n(function () {\n  'use strict';\n\n  var forEachAsync = require('forEachAsync').forEachAsync\n    ;\n\n  // do stuff ...\n}());\n```\n\n\nNode Installation\n===\n\n```bash\nnpm install --save forEachAsync@3.x\n```\n\nAPI\n===\n\n**`forEachAsync(array, callback[, thisArg])`**\n\nParameters\n\n  * `array` Array of elements to iterate over\n  * `callback` Function to execute for each element, takes 4 arguments\n    * `next` the function to call when the current element has been dealt with\n    * `element` a single element of the aforementioned array\n    * `index` the index of the current element\n    * `array` the same array mentioned above\n  * `thisArg` Object to use as `this` when executing `callback`\n\n**`forEachAsync#then(done)`**\n\nParameters\n\n  * `then` is in the return value of `forEachAsync` and accepts a final `done` callback.\n    * `done` called after `forEachAsync` is complete, takes no arguments\n\nInternal API\n===\n\n`forEachAsync.__BREAK`\n\nThis is used internally for the purposes of the `ArrayAsync` library.\n\nPlease don't `break` stuff; use [`ArrayAsync`](https://github.com/FuturesJS/ArrayAsync)`.someAsync` or [`ArrayAsync`](https://github.com/FuturesJS/ArrayAsync)`.everyAsync` instead.\n",
  "readmeFilename": "README.md",
  "_id": "foreachasync@3.0.0",
  "dist": {
    "shasum": "d06082dda68118e8b1e3f217bfbd73d677a012ae"
  },
  "_from": "foreachasync@3.x",
  "_resolved": "https://registry.npmjs.org/foreachasync/-/foreachasync-3.0.0.tgz"
}
