{
  "name": "walk",
  "description": "A node port of python's os.walk",
  "url": "http://github.com/coolaj86/node-walk",
  "keywords": [
    "util",
    "os",
    "sys",
    "fs",
    "walk",
    "walkSync"
  ],
  "author": {
    "name": "AJ ONeal",
    "email": "coolaj86@gmail.com"
  },
  "contributors": [],
  "dependencies": {
    "foreachasync": "3.x"
  },
  "lib": ".",
  "main": "./lib/walk.js",
  "version": "2.3.4",
  "repository": {
    "url": "git://github.com/coolaj86/node-walk.git"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    },
    {
      "type": "Apache2",
      "url": "http://opensource.org/licenses/apache2.0.php"
    }
  ],
  "bugs": {
    "url": "https://github.com/coolaj86/node-walk/issues"
  },
  "homepage": "https://github.com/coolaj86/node-walk",
  "directories": {
    "example": "examples",
    "test": "test"
  },
  "files": [
    "lib"
  ],
  "devDependencies": {},
  "scripts": {
    "test": "./test/walk-test.sh"
  },
  "readme": "node-walk\n====\n\nnodejs walk implementation.\n\nThis is somewhat of a port python's `os.walk`, but using Node.JS conventions.\n\n  * EventEmitter\n  * Asynchronous\n  * Chronological (optionally)\n  * Built-in flow-control\n  * includes Synchronous version (same API as Asynchronous)\n\nAs few file descriptors are opened at a time as possible.\nThis is particularly well suited for single hard disks which are not flash or solid state.\n\nInstallation\n----\n\n    npm install walk\n\nUsage\n====\n\nBoth Asynchronous and Synchronous versions are provided.\n\n```javascript\n(function () {\n  \"use strict\";\n\n  var walk = require('walk')\n    , fs = require('fs')\n    , options\n    , walker\n    ;\n\n  options = {\n    followLinks: false\n    // directories with these keys will be skipped\n  , filters: [\"Temp\", \"_Temp\"]\n  };\n\n  walker = walk.walk(\"/tmp\", options);\n\n  // OR\n  // walker = walk.walkSync(\"/tmp\", options);\n\n  walker.on(\"names\", function (root, nodeNamesArray) {\n    nodeNamesArray.sort(function (a, b) {\n      if (a > b) return 1;\n      if (a < b) return -1;\n      return 0;\n    });\n  });\n\n  walker.on(\"directories\", function (root, dirStatsArray, next) {\n    // dirStatsArray is an array of `stat` objects with the additional attributes\n    // * type\n    // * error\n    // * name\n    \n    next();\n  });\n\n  walker.on(\"file\", function (root, fileStats, next) {\n    fs.readFile(fileStats.name, function () {\n      // doStuff\n      next();\n    });\n  });\n\n  walker.on(\"errors\", function (root, nodeStatsArray, next) {\n    next();\n  });\n\n  walker.on(\"end\", function () {\n    console.log(\"all done\");\n  });\n}());\n```\n\n### Sync\n\nNote: You **can't use EventEmitter** if you want truly synchronous walker\n(although it's synchronous under the hood, it appears not to be due to the use of `process.nextTick()`).\n\nInstead **you must use `options.listeners`** for truly synchronous walker.\n\nAlthough the sync version uses all of the `fs.readSync`, `fs.readdirSync`, and other sync methods,\nI don't think I can prevent the `process.nextTick()` that `EventEmitter` calls.\n\n```javascript\n(function () {\n  \"use strict\";\n\n  var walk = require('walk')\n    , fs = require('fs')\n    , options\n    , walker\n    ;\n\n  // To be truly synchronous in the emitter and maintain a compatible api,\n  // the listeners must be listed before the object is created\n  options = {\n    listeners: {\n      names: function (root, nodeNamesArray) {\n        nodeNamesArray.sort(function (a, b) {\n          if (a > b) return 1;\n          if (a < b) return -1;\n          return 0;\n        });\n      }\n    , directories: function (root, dirStatsArray, next) {\n        // dirStatsArray is an array of `stat` objects with the additional attributes\n        // * type\n        // * error\n        // * name\n        \n        next();\n      }\n    , file: function (root, fileStats, next) {\n        fs.readFile(fileStats.name, function () {\n          // doStuff\n          next();\n        });\n      }\n    , errors: function (root, nodeStatsArray, next) {\n        next();\n      }\n    }\n  };\n\n  walker = walk.walkSync(\"/tmp\", options);\n\n  console.log(\"all done\");\n}());\n```\n\nAPI\n====\n\nEmitted Values\n\n  * `on('XYZ', function(root, stats, next) {})`\n\n  * `root` - the containing the files to be inspected\n  * *stats[Array]* - a single `stats` object or an array with some added attributes\n    * type - 'file', 'directory', etc\n    * error\n    * name - the name of the file, dir, etc \n  * next - no more files will be read until this is called\n\nSingle Events - fired immediately\n\n  * `end` - No files, dirs, etc left to inspect\n\n  * `directoryError` - Error when `fstat` succeeded, but reading path failed (Probably due to permissions).\n  * `nodeError` - Error `fstat` did not succeeded.\n  * `node` - a `stats` object for a node of any type\n  * `file` - includes links when `followLinks` is `true`\n    * Note: This feature is broken in the current version, but works in the previous `walk-recursive` version\n  * `directory`\n  * `symbolicLink` - always empty when `followLinks` is `true`\n  * `blockDevice`\n  * `characterDevice`\n  * `FIFO`\n  * `socket`\n\nEvents with Array Arguments - fired after all files in the dir have been `stat`ed\n\n  * `names` - before any `stat` takes place. Useful for sorting and filtering.\n    * Note: the array is an array of `string`s, not `stat` objects\n    * Note: the `next` argument is a `noop`\n\n  * `errors` - errors encountered by `fs.stat` when reading ndes in a directory\n  * `nodes` - an array of `stats` of any type\n  * `files`\n  * `directories` - modification of this array - sorting, removing, etc - affects traversal\n  * `symbolicLinks`\n  * `blockDevices`\n  * `characterDevices`\n  * `FIFOs`\n  * `sockets`\n\n**Warning** beware of infinite loops when `followLinks` is true (using `walk-recurse` varient).\n\nComparisons\n====\n\nTested on my `/System` containing 59,490 (+ self) directories (and lots of files).\nThe size of the text output was 6mb.\n\n`find`:\n    time bash -c \"find /System -type d | wc\"\n    59491   97935 6262916\n\n    real  2m27.114s\n    user  0m1.193s\n    sys 0m14.859s\n\n`find.js`:\n\nNote that `find.js` omits the start directory\n\n    time bash -c \"node examples/find.js /System -type d | wc\"\n    59490   97934 6262908\n   \n    # Test 1 \n    real  2m52.273s\n    user  0m20.374s\n    sys 0m27.800s\n    \n    # Test 2\n    real  2m23.725s\n    user  0m18.019s\n    sys 0m23.202s\n\n    # Test 3\n    real  2m50.077s\n    user  0m17.661s\n    sys 0m24.008s\n\nIn conclusion node.js asynchronous walk is much slower than regular \"find\".\n\nLICENSE\n===\n\n`node-walk` is available under the following licenses:\n\n  * MIT\n  * Apache 2\n\nCopyright 2011 - Present AJ ONeal\n",
  "readmeFilename": "README.md",
  "_id": "walk@2.3.4",
  "dist": {
    "shasum": "b65064de4b5714068217550d25fcfdc62762c582"
  },
  "_from": "walk@^2.3.4",
  "_resolved": "https://registry.npmjs.org/walk/-/walk-2.3.4.tgz"
}
